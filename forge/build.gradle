plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

String getConfig(String key) {
    return project.getParent().properties.get(key)
}

def parent_path = project.getParent() == rootProject ? "" : project.getParent().getPath()
def mod_id = getConfig("mod_id")
def common_project = project("${parent_path}:${mod_id}-common")
def version = getConfig("version")
def mod_license = getConfig("mod_license")
def mod_name = getConfig("mod_name")
def mod_description = getConfig("mod_description")
def mod_url = getConfig("mod_url")
def minecraft_version = getConfig("minecraft_version")
def ldlib_id = getConfig("ldlib_id")
def ldlib_version = getConfig("ldlib_version")
def create_forge_version = getConfig("create_forge_version")
def registrate_forge_version = getConfig("registrate_forge_version")
def flywheel_forge_minecraft_version = getConfig("flywheel_forge_minecraft_version")
def flywheel_forge_version = getConfig("flywheel_forge_version")
def jei_version = getConfig("jei_version")
def rei_version = getConfig("rei_version")
def top_forge_version = getConfig("top_forge_version")

architectury {
    platformSetupLoomIde()
    forge()
}

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

loom {
    accessWidenerPath = common_project.file("src/main/resources/${mod_id}.accesswidener")

    forge {
        mixinConfig(
                "${mod_id}-common.mixins.json",
                "${mod_id}.mixins.json",
        )

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen{
            mod(mod_id)
        }
    }

    runConfigs.named("data").configure {
        programArg("--existing=" + common_project.file("src/main/resources").absolutePath)
    }

    if (isJetBrainsRuntime()) {
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition'
                vmArgs '-XX:HotswapAgent=fatjar'
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
//    snapshotModImplementation.extendsFrom modImplementation
//    snapshotModImplementation {
//        resolutionStrategy.cacheChangingModulesFor(0, "seconds")
//    }
}

//configurations.all {
//    resolutionStrategy.cacheChangingModulesFor(0, "seconds")
//    resolutionStrategy.cacheDynamicVersionsFor(0, "seconds")
//}

repositories {
    // mavens for Forge-exclusives
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
}

dependencies {
    forge("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    common(project(path: "${parent_path}:${mod_id}-common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: "${parent_path}:${mod_id}-common", configuration: "transformProductionForge")) { transitive = false }

    // LDLib
    modCompileOnly("com.lowdragmc.ldlib:${ldlib_id}:${ldlib_version}+${ldlib_id}-common-1.19.2") { transitive = false }
    modImplementation("com.lowdragmc.ldlib:${ldlib_id}-${ldlib_id}-forge:${ldlib_version}+${ldlib_id}-forge-1.19.2") { transitive = false }

    // Registrate
    modImplementation(include("com.tterrag.registrate:Registrate:${registrate_forge_version}"))

    // Create and its dependencies
    modCompileOnly("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modCompileOnly("com.jozufozu.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")

    // JEI
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // REI
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
    modImplementation("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

    // TOP
    modImplementation("mcjty.theoneprobe:theoneprobe:${top_forge_version}") { transitive = false }

}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "mod_id", mod_id,
            "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version", minecraft_version,
            "mod_license", mod_license,
            "mod_name", mod_name,
            "mod_description", mod_description,
            "mod_url", mod_url,
            "ldlib_version", ldlib_version
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = common_project.sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
